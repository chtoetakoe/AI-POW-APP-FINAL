// routes/generateVisual.ts
import express from "express";
import { OpenAI } from "openai";
import { asyncHandler } from "../utils/asyncHandler";
import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";

dotenv.config();
const router = express.Router();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

router.post(
  "/",
  asyncHandler(async (req, res) => {
    const { meeting_id } = req.body;
    if (!meeting_id) return res.status(400).json({ error: "meeting_id required" });

    // ✅ 1. Fetch meeting from Supabase
    const { data, error } = await supabase
      .from("meetings")
      .select("summary, decisions, action_items")
      .eq("id", meeting_id)
      .single();

    if (error || !data) {
      return res.status(404).json({ error: "Meeting not found" });
    }

    const { summary, decisions, action_items } = data;

    // ✅ 2. Use GPT to generate visual prompt
    const gptResponse = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "You're a visual storyteller. Based on meeting summaries and decisions, create a descriptive visual prompt suitable for DALL·E to generate a useful image for a presentation.",
        },
        {
          role: "user",
          content: `Summary: ${summary}\nDecisions: ${decisions.join(", ")}\nAction Items: ${action_items
            .map((item: any) => `${item.task} by ${item.assignee} (due ${item.deadline})`)
            .join("; ")}`,
        },
      ],
    });

    const prompt = gptResponse.choices[0].message?.content;
    if (!prompt) return res.status(500).json({ error: "Failed to generate prompt" });

    // ✅ 3. Call DALL·E 3 to generate image
    const imageResponse = await openai.images.generate({
      model: "dall-e-3",
      prompt,
      size: "1024x1024",
      response_format: "url",
    });

    if (!imageResponse.data || imageResponse.data.length === 0) {
        return res.status(500).json({ error: "No image generated by DALL·E." });
      }
      const imageUrl = imageResponse.data[0].url;
      

    // ✅ (Optional) Save URL back to Supabase
    await supabase
      .from("meetings")
      .update({ visual_url: imageUrl })
      .eq("id", meeting_id);

    // ✅ 4. Return response
    res.json({ prompt, imageUrl });
  })
);

export default router;
